// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SlackDummyFactory.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package Naos.Build.Conventions.VisualStudioProjectTemplates.Domain.Test (1.55.47)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Slack.Domain.Test
{
    using System;

    using FakeItEasy;

    using OBeautifulCode.AutoFakeItEasy;

    /// <summary>
    /// A Dummy Factory for types in <see cref="Naos.Slack.Domain"/>.
    /// </summary>
#if !NaosSlackSolution
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Slack.Domain.Test", "See package version number")]
    internal
#else
    public
#endif
    class SlackDummyFactory : DefaultSlackDummyFactory
    {
        public SlackDummyFactory()
        {
            /* Add any overriding or custom registrations here. */
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(IconResourceIdentifierKind.Unknown);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(SendSlackMessageResult.Unknown);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(UploadFileToSlackResult.Unknown);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(SlackTextFormat.Unknown);

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var sendSlackMessageResult = A.Dummy<SendSlackMessageResult>();

                SendSlackMessageResponse result;

                if (sendSlackMessageResult == SendSlackMessageResult.Succeeded)
                {
                    result = new SendSlackMessageResponse(sendSlackMessageResult, A.Dummy<string>(), null);
                }
                else if (sendSlackMessageResult == SendSlackMessageResult.FailedWithSlackReturningError)
                {
                    result = new SendSlackMessageResponse(sendSlackMessageResult, A.Dummy<string>(), null);
                }
                else
                {
                    result = new SendSlackMessageResponse(sendSlackMessageResult, null, A.Dummy<string>());
                }

                return result;
            });

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var uploadFileToSlackResult = A.Dummy<UploadFileToSlackResult>();

                UploadFileToSlackResponse result;

                if (uploadFileToSlackResult == UploadFileToSlackResult.Succeeded)
                {
                    result = new UploadFileToSlackResponse(uploadFileToSlackResult, A.Dummy<string>(), null);
                }
                else if (uploadFileToSlackResult == UploadFileToSlackResult.FailedWithSlackReturningError)
                {
                    result = new UploadFileToSlackResponse(uploadFileToSlackResult, A.Dummy<string>(), null);
                }
                else
                {
                    result = new UploadFileToSlackResponse(uploadFileToSlackResult, null, A.Dummy<string>());
                }

                return result;
            });

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var slackMessageResponse = A.Dummy<SendSlackMessageResponse>().Whose(_=> _.SendSlackMessageResult != SendSlackMessageResult.Succeeded);

                var result = new FailedToSendSlackMessageEvent<Version>(A.Dummy<Version>(), A.Dummy<DateTime>().ToUniversalTime(), slackMessageResponse);

                return result;
            });

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var slackMessageResponse = A.Dummy<SendSlackMessageResponse>().Whose(_ => _.SendSlackMessageResult == SendSlackMessageResult.Succeeded);

                var result = new SucceededInSendingSlackMessageEvent<Version>(A.Dummy<Version>(), A.Dummy<DateTime>().ToUniversalTime(), slackMessageResponse);

                return result;
            });

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var result = new SendSlackMessageRequestedEvent<Version>(A.Dummy<Version>(), A.Dummy<DateTime>().ToUniversalTime(), A.Dummy<SendSlackMessageRequestBase>());

                return result;
            });

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var uploadFileToSlackResponse = A.Dummy<UploadFileToSlackResponse>().Whose(_ => _.UploadFileToSlackResult != UploadFileToSlackResult.Succeeded);

                var result = new FailedToUploadFileToSlackEvent<Version>(A.Dummy<Version>(), A.Dummy<DateTime>().ToUniversalTime(), uploadFileToSlackResponse);

                return result;
            });

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var uploadFileToSlackResponse = A.Dummy<UploadFileToSlackResponse>().Whose(_ => _.UploadFileToSlackResult == UploadFileToSlackResult.Succeeded);

                var result = new SucceededInUploadingFileToSlackEvent<Version>(A.Dummy<Version>(), A.Dummy<DateTime>().ToUniversalTime(), uploadFileToSlackResponse);

                return result;
            });

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var result = new UploadFileToSlackRequestedEvent<Version>(A.Dummy<Version>(), A.Dummy<DateTime>().ToUniversalTime(), A.Dummy<UploadFileToSlackRequest>());

                return result;
            });
        }
    }
}